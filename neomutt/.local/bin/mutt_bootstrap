#!/usr/bin/env python
"""
mutt_bootstrap

Bootstrap mutt with pass and fzf

What it is/does
    - Securely, interactively, conveniently start mutt with help of pass.
    - Configurations are outside of this script, email settings are
      automatically detected. This script does not contain any specific
      email addresses, providers or passwords.
    - When starting mutt, fzf will popup, letting you choose the email you
      want to log into.

Requirement
    fzf: TUI tool
    pass: Password management tool
    oama: Optional, for OAuth2 of microsoft accounts

Setup
    1. Save passwords for emails with pass (password store)

    The password should be under 'mail' subfolder, with the email address
    as the filename. The password should be the first line

        $ pass edit mail/<email-address>
        # put the password in the first line

    2. Optinal. Set IMAP and SMTP servers

    By default, the imap and smtp server are guessed to be:

        imaps://imap.{domain}:993/
        smtp://{mail}@smtp.{domain}:587/

    For most email providers, this should work.

    If the imap or smtp server is not trivial, you can add these addresses
    with ports in the password file below the password:

        <password>
        imap: <imap_server>:<imap_port>
        smtp: <smtp_server>:<smtp_port>

    3. For microsoft or google accounts, you need to set up OAuth2

    Here `oama` is used to authorize. See https://github.com/pdobsan/oama.
    Use `oama authorize microsoft|google <email> --device` to authorize.
    Then this script will use `oama access <email>` to get the access token.

    4. In muttrc add this line:

        source "python <this file> |"
"""
import os
import re
import glob
from subprocess import run, PIPE


def get_mail_fzf():
    """
    Get email address from password store, interactively with fzf.
    """
    # grab all email address from 'mail' subfolder in password store
    PASS_DIR_DEFAULT = os.path.join(os.getenv("HOME"), ".passwordstore")
    PASS_DIR = os.getenv("PASSWORD_STORE_DIR", PASS_DIR_DEFAULT)
    PASS_SUBDIR_MAIL = os.path.join(PASS_DIR, "mail")
    mails_gpg_files = glob.glob(os.path.join(PASS_SUBDIR_MAIL, "*@*.*.gpg"))
    mails = [os.path.basename(m).rstrip(".gpg") for m in mails_gpg_files]

    # use fzf to choose one email
    list_emails = '\n'.join(sorted(mails))
    res = run(['fzf', '--reverse'],
              input=list_emails.encode(),
              stdout=PIPE)
    if res.returncode == 130:
        print("fzf was interrupted")
        exit()
    elif res.returncode != 0:
        raise OSError("fzf failed")

    # get basic information
    mail = res.stdout.decode().strip()
    return mail


def get_password(mail_address):
    """
    use pass to retrieve password, with optionally extra information
    """
    res = run(['pass', 'show', f'mail/{mail_address}'], stdout=PIPE, stderr=PIPE)
    content = res.stdout.decode().strip().split('\n')
    if res.returncode != 0:
        raise OSError("pass failed")
    password = content[0]
    extra = dict(map(str.strip, line.split(':', 1)) for line in content[1:])
    return password, extra


def get_imap_server(mail, attrs):
    domain = mail.split('@')[1]

    if "imap" in attrs:
        imap_server = mail + '@' + attrs["imap"]
        if not re.search(r"^(imap|imaps)://", imap_server):
            imap_server = f"imaps://{imap_server}"
        if not re.search(r":[1-9]+$", imap_server):
            imap_server = f"{imap_server}:993"
        return imap_server
    else:
        return f'imaps://{mail}@imap.{domain}:993/'


def get_smtp_server(mail, attrs):
    domain = mail.split('@')[1]

    if "smtp" in attrs:
        smtp_server = attrs["smtp"]
        if not re.search(r"{mail}@", smtp_server):
            smtp_server = f"{mail}@{smtp_server}"
        if not re.search(r"^(smtp|smtps)://", smtp_server):
            smtp_server = f"smtps://{smtp_server}"
        if not re.search(r":[1-9]+$", smtp_server):
            smtp_server = f"{smtp_server}:465"
        return smtp_server
    else:
        return f'smtps://{mail}@smtp.{domain}:465/'


if __name__ == "__main__":
    # get email address and password
    mail_address = get_mail_fzf()
    password, extra = get_password(mail_address)

    # get imap and smtp server
    imap_server = get_imap_server(mail_address, attrs=extra)
    smtp_server = get_smtp_server(mail_address, attrs=extra)

    xoauth2_providers = [
        "outlook.com",
        "gmail.com",
    ]
    # dump mutt configurations
    print(f'set imap_user = "{mail_address}"')
    print(f'set from = "{mail_address}"')
    print(f'set folder = "{imap_server}"')
    print(f'set smtp_url = "{smtp_server}"')
    if mail_address.split('@')[1] in xoauth2_providers:
        auth = "xoauth2:oauthbearer"
        cmd = f"oama access {mail_address}"
        print(f'set imap_authenticators = "{auth}"')
        print(f'set imap_oauth_refresh_command = "{cmd}"')
        print(f'set smtp_authenticators = "{auth}"')
        print(f'set smtp_oauth_refresh_command = "{cmd}"')
    else:
        print(f'set imap_pass = {password}')
        print(f'set smtp_pass = {password}')
